---
## Create GKE cluster

- name: get info on an instance
  gcp_sql_instance_info:
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
  register: sql_instance_info

- debug:
    var: sql_instance_info.resources
  
- debug: msg="sql_instance_dict:{{ (sql_instance_info.resources | selectattr('name', 'defined') | selectattr('name', 'equalto', db_identifier ) | list) [0] }}"

# - set_fact: sql_instance_dict="{{ (sql_instance_info.resources | selectattr('name', 'defined') | selectattr('name', 'equalto', db_identifier ) | list) [0] }}"

# - debug:
#     var: sql_instance_dict

# - name: create an sql user
#   gcp_sql_user:
#     name: "{{ db_username }}"
#     host: ""
#     password: "{{ db_password }}"
#     instance: "{{ sql_instance_dict }}"
#     project: "{{ project_name }}"
#     auth_kind: "{{ auth_kind }}"
#     service_account_file: "{{ service_account_file }}"
#     state: present
#   register: sql_user



# - name: Create Google Cloud Compute Network 
#   shell: "gcloud compute networks create {{ network_name }}"
#   ignore_errors: yes

# - name: Create Google Cloud Compute Network Firewall
#   shell: "gcloud compute firewall-rules create {{ network_firewall_name }} --network {{ network_name }} --allow tcp:22,tcp:3389,icmp"
#   ignore_errors: yes

# - name: Create GKE cluster with gcloud SDK 
#   shell:
#     cmd: |
#       cat <<EOF | gcloud container --project "{{ project_name }}" clusters create \
#         --cluster-version "1.16.15-gke.4300" \
#         --region "{{ region_name }}" \
#         --network "{{ network_name }}" \
#         --machine-type "{{ machine_type }}" \
#         --enable-autoscaling \
#         --num-nodes "{{ num_nodes }}" \
#         --min-nodes "{{ min_nodes }}" \
#         --max-nodes "{{ max_nodes }}" \
#         --scopes gke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite \
#         "{{ cluster_name }}"
#       EOF

# - name: Verify that all nodes are ready in the cluster
#   shell: kubectl get nodes | grep "Ready" | wc -l
#   register: cmd_result
#   until: cmd_result.stdout.find('{{ node_count + master_count }}') != -1
#   retries: 30
#   delay: 30
#   when: elb_info.elbs.0.instances_inservice_count >= 1 or elb_info.elbs.0.instances_outofservice_count >= 1

# - debug: msg="Bastion ELB:{{ (elb_info.elbs | selectattr("dns_name", "match", "^bastion") | map(attribute='dns_name') | list)[0] }}"